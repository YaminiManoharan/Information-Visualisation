# Load the required libraries
options(scipen=999)
library(e1071)
library(ggplot2)
#Q1
#1
# Set seed for reproducibility
set.seed(50)
# Generate random data
N <- 300
x <- matrix(rnorm(N*2), ncol=2)
# Define class-specific means
C <- 3
z <- matrix(c(0,0,3,0,3,0),C,2)
# Generate response vector
y <- rep(1:C, each=N/C)
# Assign class-specific means to data points
for(i in 1:C){
x[y == i,] <- x[y == i,] + matrix(rep(z[i,], each=N/C), ncol=2)
}
# Create a data frame for plotting
data_plot <- data.frame(x, class = as.factor(y))
# Plot the data
ggplot(data_plot, aes(x = X1, y = X2, color = class)) + geom_point() + ggtitle("Data Visualization with Class Labels")
#2
# Construct the data frame for training
tdata <- data.frame(x = x, y = as.factor(y))
# Fit the SVM classifier
svmfit <- svm(y ~ ., data = tdata, kernel = "linear", cost = 10)
# Plot the results
plot(svmfit, tdata, svSymbol = 1)
# Generate summary
svm_summary <- summary(svmfit)
print(svm_summary)
#3
# Perform ten-fold cross-validation
set.seed(50) # consistent results
tune_result <- tune(svm, y ~ ., data = tdata, kernel = "linear", ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
# Summary of the tune result
tune_summary <- summary(tune_result)
print(tune_summary)
# Save the best model
bestmod <- tune_result$best.model
# Check the number of support vectors in the best model
bestmod_summary <- summary(bestmod)
print(bestmod_summary)
#3
# Perform ten-fold cross-validation
set.seed(50) # consistent results
tune_result <- tune(svm, y ~ ., data = tdata, kernel = "linear", ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)), tunecontrol = tune.control(sampling = "cross", cross = 10))
# Summary of the tune result
tune_summary <- summary(tune_result)
print(tune_summary)
# Save the best model
bestmod <- tune_result$best.model
# Check the number of support vectors in the best model
bestmod_summary <- summary(bestmod)
print(bestmod_summary)
#4
# Set seed
set.seed(100)
# Generate test data
xtest <- matrix(rnorm(N*2), ncol=2)
ytest <- sample(1:C, N, replace = TRUE)
for(i in 1:C){
xtest[ytest == i,] <- xtest[ytest == i,] + matrix(rep(z[i,], sum(ytest == i)), ncol=2)
}
testdata <- data.frame(x = xtest, y = as.factor(ytest))
# Make predictions
yp <- predict(bestmod, testdata)
# Display the confusion matrix
confusion_matrix <- table(predicted = yp, actual = testdata$y)
print(confusion_matrix)
#4
#4 Testing model
# Set seed
set.seed(100)
# Generate test data
xtest <- matrix(rnorm(N*2), ncol=2)
ytest <- sample(1:3, N, replace = TRUE)  # random labels
for(i in 1:3){
xtest[ytest == i,] <- xtest[ytest == i,] + matrix(rep(z[i,], sum(ytest == i)), ncol=2, byrow=FALSE)
}
testdata <- data.frame(x = xtest, y = as.factor(ytest))
# Predict using the best model
yp <- predict(bestmod, testdata)
# Compare the predicted labels against the test labels
table(predicted = yp, actual = testdata$y)
#5
# Train and tune with radial kernel
set.seed(50)
tune_out_radial <- tune(svm, y ~ ., data = tdata, kernel = "radial", ranges = list(cost = c(0.1, 1, 10, 100, 1000), gamma = c(0.5, 1, 2, 3, 4)))
# Summary of the tuning result
summary_radial <- summary(tune_out_radial)
print(summary_radial)
# Save the best model
bestmod_radial <- tune_out_radial$best.model
# Predict and evaluate with test data
yp_radial <- predict(bestmod_radial, testdata)
confusion_matrix_radial <- table(predicted = yp_radial, actual = testdata$y)
print(confusion_matrix_radial)
library(shiny); runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/city_work.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/event_map.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/transportation_map.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/transportation_map.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/city_work.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/event_map.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/city_work.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/city_work.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/transportation_map.R')
runApp('C:/Users/yamin/Downloads/GEOM90007_Assignment3_Group84-1/event_map.R')
